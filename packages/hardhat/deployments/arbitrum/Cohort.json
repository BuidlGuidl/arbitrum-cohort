{
  "address": "0x9beFA108b2B23C07905F107fa6dD529F6e138630",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primaryAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_cycle",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_requiresApproval",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyWithdrawnOneTime",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimum",
          "type": "uint256"
        }
      ],
      "name": "BelowMinimumCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BuilderAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractIsLocked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20FundsTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ERC20SendingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EtherSendingFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlocked",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFundsInContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlocked",
          "type": "uint256"
        }
      ],
      "name": "InsufficientInStream",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBuilderAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNewAdminAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxBuildersReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providedLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLength",
          "type": "uint256"
        }
      ],
      "name": "MaxNameLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "name": "NoActiveStreamForBuilder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFundsInContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValueSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoWithdrawRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingWithdrawRequestExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawRequestNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddBuilder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "requiresApproval",
          "type": "bool"
        }
      ],
      "name": "ApprovalRequirementChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContractDrained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "ContractLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "PrimaryAdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UpdateBuilder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "name": "WithdrawCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "name": "WithdrawRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeBuilders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "addBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "addBuilderStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        }
      ],
      "name": "allBuildersData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "builderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CohortBuilderManager.BuilderData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "approveWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "builderIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cycle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "drainContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isONETIME",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldGrant",
          "type": "bool"
        }
      ],
      "name": "modifyAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "rejectWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "removeBuilderStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requireApprovalForWithdrawals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requiresApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_requiresApproval",
          "type": "bool"
        }
      ],
      "name": "setBuilderApprovalRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectName",
          "type": "string"
        }
      ],
      "name": "streamWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "streamingBuilders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "last",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "toggleContractApprovalRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enable",
          "type": "bool"
        }
      ],
      "name": "toggleLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPrimaryAdmin",
          "type": "address"
        }
      ],
      "name": "transferPrimaryAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "unlockedBuilderAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newCap",
          "type": "uint256"
        }
      ],
      "name": "updateBuilderStreamCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xea1db4cc0902eba2be626aa859b23fe343b580e28050440b56169a045b7f045d",
  "receipt": {
    "to": null,
    "from": "0x6320a12B9ddEF0EF3f7c2520a4c8bBfD337E5231",
    "contractAddress": "0x9beFA108b2B23C07905F107fa6dD529F6e138630",
    "transactionIndex": 6,
    "gasUsed": "3750198",
    "logsBloom": "0x
    "blockHash": "0xc875752f511daee0615c49f9730e67969978e31eab929ac03725eb419a3a1ca0",
    "transactionHash": "0xea1db4cc0902eba2be626aa859b23fe343b580e28050440b56169a045b7f045d",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 345914690,
        "transactionHash": "0xea1db4cc0902eba2be626aa859b23fe343b580e28050440b56169a045b7f045d",
        "address": "0x9beFA108b2B23C07905F107fa6dD529F6e138630",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006a4e5ed62d3827128dbd70c5bde25c0e6c6aa537",
          "0x0000000000000000000000006320a12b9ddef0ef3f7c2520a4c8bbfd337e5231"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xc875752f511daee0615c49f9730e67969978e31eab929ac03725eb419a3a1ca0"
      }
    ],
    "blockNumber": 345914690,
    "cumulativeGasUsed": "7238658",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6A4E5ed62d3827128Dbd70c5bDe25C0e6c6aA537",
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "Arbitrum Builders Cohort",
    "Arbitrum Builders Cohort contract",
    2592000,
    [],
    [],
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "e7c63aea51599d9a5259f172e7f9de76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_requiresApproval\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyWithdrawnOneTime\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"BelowMinimumCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuilderAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20FundsTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ERC20SendingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EtherSendingFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"}],\"name\":\"InsufficientFundsInContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"}],\"name\":\"InsufficientInStream\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBuilderAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNewAdminAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBuildersReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLength\",\"type\":\"uint256\"}],\"name\":\"MaxNameLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"name\":\"NoActiveStreamForBuilder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFundsInContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValueSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWithdrawRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingWithdrawRequestExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddBuilder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"requiresApproval\",\"type\":\"bool\"}],\"name\":\"ApprovalRequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractDrained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"PrimaryAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBuilder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"WithdrawApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"WithdrawRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeBuilders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"addBuilderStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"}],\"name\":\"allBuildersData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"builderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CohortBuilderManager.BuilderData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"approveWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"builderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"drainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isONETIME\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldGrant\",\"type\":\"bool\"}],\"name\":\"modifyAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"rejectWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"removeBuilderStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireApprovalForWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requiresApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_requiresApproval\",\"type\":\"bool\"}],\"name\":\"setBuilderApprovalRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"streamWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"streamingBuilders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"toggleContractApprovalRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrimaryAdmin\",\"type\":\"address\"}],\"name\":\"transferPrimaryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"unlockedBuilderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"updateBuilderStreamCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Main contract for streaming ETH or ERC20 tokens to builders Inherits all functionality from modular contracts\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addBatch(address[],uint256[])\":{\"details\":\"Add a batch of builders\",\"params\":{\"_builders\":\"Array of builder addresses\",\"_caps\":\"Array of cap values\"}},\"addBuilderStream(address,uint256)\":{\"details\":\"Add a new builder's stream\",\"params\":{\"_builder\":\"Builder address\",\"_cap\":\"Maximum amount of funds that can be withdrawn in a cycle\"}},\"allBuildersData(address[])\":{\"details\":\"Get all builders' data\",\"params\":{\"_builders\":\"Array of builder addresses\"},\"returns\":{\"_0\":\"Array of BuilderData for each builder\"}},\"approveWithdraw(address,uint256)\":{\"details\":\"Approve and complete a withdrawal request in one step\",\"params\":{\"_builder\":\"Builder address\",\"_requestId\":\"ID of the request to approve and complete\"}},\"constructor\":{\"details\":\"Constructor that passes parameters to the base contract\",\"params\":{\"_builders\":\"Array of builder addresses\",\"_caps\":\"Array of cap values for builders\",\"_cycle\":\"Cycle duration\",\"_description\":\"Description of the cohort\",\"_name\":\"Name of the cohort\",\"_primaryAdmin\":\"Address of the primary admin\",\"_requiresApproval\":\"Whether withdrawals require approval\",\"_tokenAddress\":\"Address of ERC20 token (zero address for ETH)\"}},\"drainContract(address)\":{\"details\":\"Drain the contract to the primary admin address\",\"params\":{\"_token\":\"Token address (zero address for ETH)\"}},\"fundContract(uint256)\":{\"details\":\"Fund the contract with ETH or ERC20 tokens\",\"params\":{\"_amount\":\"Amount to fund (for ERC20 tokens)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"Function to check if an address is an admin\"},\"modifyAdminRole(address,bool)\":{\"details\":\"Modify admin roles\",\"params\":{\"adminAddress\":\"Address to grant/revoke admin role\",\"shouldGrant\":\"Whether to grant or revoke the role\"}},\"rejectWithdraw(address,uint256)\":{\"details\":\"Reject a withdrawal request\",\"params\":{\"_builder\":\"Builder address\",\"_requestId\":\"ID of the request to reject\"}},\"removeBuilderStream(address)\":{\"details\":\"Remove a builder's stream\",\"params\":{\"_builder\":\"Builder address\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setBuilderApprovalRequirement(address,bool)\":{\"details\":\"Set whether a builder requires approval for withdrawals\",\"params\":{\"_builder\":\"Builder address\",\"_requiresApproval\":\"Whether the builder requires approval\"}},\"streamWithdraw(uint256,string,string)\":{\"details\":\"Stream withdraw for a builder\",\"params\":{\"_amount\":\"Amount to withdraw\",\"_reason\":\"Reason for withdrawal\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"toggleContractApprovalRequirement(bool)\":{\"details\":\"Set whether this contract requires approval for withdrawals\",\"params\":{\"_enable\":\"Whether to require approval\"}},\"toggleLock(bool)\":{\"details\":\"Lock or unlock the contract\",\"params\":{\"_enable\":\"Whether to lock the contract\"}},\"transferPrimaryAdmin(address)\":{\"details\":\"Transfer primary admin role\",\"params\":{\"newPrimaryAdmin\":\"Address of the new primary admin\"}},\"unlockedBuilderAmount(address)\":{\"details\":\"Get the unlocked amount for a builder\",\"params\":{\"_builder\":\"Builder address\"},\"returns\":{\"_0\":\"Unlocked amount for the builder\"}},\"updateBuilderStreamCap(address,uint256)\":{\"details\":\"Update a builder's stream cap\",\"params\":{\"_builder\":\"Builder address\",\"_newCap\":\"New cap value\"}}},\"title\":\"Cohort\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Cohort.sol\":\"Cohort\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Abstracts/CohortAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./CohortBase.sol\\\";\\n\\n/**\\n * @title CohortAdmin\\n * @dev Contract containing admin functionality for managing Cohort\\n */\\nabstract contract CohortAdmin is CohortBase {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Modify admin roles\\n     * @param adminAddress Address to grant/revoke admin role\\n     * @param shouldGrant Whether to grant or revoke the role\\n     */\\n    function modifyAdminRole(address adminAddress, bool shouldGrant) public onlyAdmin {\\n        if (shouldGrant) {\\n            if (streamingBuilders[adminAddress].cap != 0) revert InvalidBuilderAddress();\\n            grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            emit AdminAdded(adminAddress);\\n        } else {\\n            if (adminAddress == primaryAdmin) revert AccessDenied();\\n            revokeRole(DEFAULT_ADMIN_ROLE, adminAddress);\\n            emit AdminRemoved(adminAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer primary admin role\\n     * @param newPrimaryAdmin Address of the new primary admin\\n     */\\n    function transferPrimaryAdmin(address newPrimaryAdmin) public {\\n        if (msg.sender != primaryAdmin) revert NotAuthorized();\\n        if (newPrimaryAdmin == address(0)) revert InvalidNewAdminAddress();\\n\\n        primaryAdmin = newPrimaryAdmin;\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, primaryAdmin);\\n        _grantRole(DEFAULT_ADMIN_ROLE, newPrimaryAdmin);\\n\\n        emit PrimaryAdminTransferred(newPrimaryAdmin);\\n    }\\n\\n    /**\\n     * @dev Lock or unlock the contract\\n     * @param _enable Whether to lock the contract\\n     */\\n    function toggleLock(bool _enable) public onlyAdmin {\\n        locked = _enable;\\n        emit ContractLocked(_enable);\\n    }\\n\\n    /**\\n     * @dev Set whether this contract requires approval for withdrawals\\n     * @param _enable Whether to require approval\\n     */\\n    function toggleContractApprovalRequirement(bool _enable) public onlyAdmin {\\n        requireApprovalForWithdrawals = _enable;\\n        emit ApprovalRequirementChanged(address(this), _enable);\\n    }\\n\\n    /**\\n     * @dev Set whether a builder requires approval for withdrawals\\n     * @param _builder Builder address\\n     * @param _requiresApproval Whether the builder requires approval\\n     */\\n    function setBuilderApprovalRequirement(\\n        address _builder,\\n        bool _requiresApproval\\n    ) public onlyAdmin isStreamActive(_builder) {\\n        requiresApproval[_builder] = _requiresApproval;\\n        emit ApprovalRequirementChanged(_builder, _requiresApproval);\\n    }\\n\\n    /**\\n     * @dev Process a withdrawal for a streamed cohort\\n     * @param _builder Builder address\\n     * @param _amount Amount to withdraw\\n     */\\n    function _processStreamWithdraw(address _builder, uint256 _amount) internal {\\n        uint256 totalAmountCanWithdraw = unlockedBuilderAmount(_builder);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInStream(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        // Process the withdrawal\\n        BuilderStreamInfo storage builderStream = streamingBuilders[_builder];\\n        uint256 builderstreamLast = builderStream.last;\\n        uint256 cappedLast = block.timestamp - cycle;\\n        if (builderstreamLast < cappedLast) {\\n            builderstreamLast = cappedLast;\\n        }\\n\\n        if (!isERC20) {\\n            uint256 contractFunds = address(this).balance;\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            (bool sent, ) = payable(_builder).call{ value: _amount }(\\\"\\\");\\n            if (!sent) revert EtherSendingFailed();\\n        } else {\\n            uint256 contractFunds = IERC20(tokenAddress).balanceOf(address(this));\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            IERC20(tokenAddress).safeTransfer(_builder, _amount);\\n        }\\n\\n        // Update last withdrawal time\\n        builderStream.last =\\n            builderstreamLast +\\n            (((block.timestamp - builderstreamLast) * _amount) / totalAmountCanWithdraw);\\n    }\\n\\n    /**\\n     * @dev Process a one-time withdrawal\\n     * @param _builder Builder address\\n     */\\n    function _processOneTimeWithdraw(address _builder) internal {\\n        BuilderStreamInfo storage builderStream = streamingBuilders[_builder];\\n\\n        // Check if the builder has already withdrawn\\n        if (builderStream.last != type(uint256).max) {\\n            revert AlreadyWithdrawnOneTime();\\n        }\\n\\n        uint256 _amount = builderStream.cap;\\n\\n        if (!isERC20) {\\n            uint256 contractFunds = address(this).balance;\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            (bool sent, ) = payable(_builder).call{ value: _amount }(\\\"\\\");\\n            if (!sent) revert EtherSendingFailed();\\n        } else {\\n            uint256 contractFunds = IERC20(tokenAddress).balanceOf(address(this));\\n            if (contractFunds < _amount) {\\n                revert InsufficientFundsInContract(_amount, contractFunds);\\n            }\\n\\n            IERC20(tokenAddress).safeTransfer(_builder, _amount);\\n        }\\n\\n        builderStream.last = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Approve and complete a withdrawal request in one step\\n     * @param _builder Builder address\\n     * @param _requestId ID of the request to approve and complete\\n     */\\n    function approveWithdraw(address _builder, uint256 _requestId) public onlyAdmin nonReentrant {\\n        if (withdrawRequests[_builder].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[_builder][_requestId];\\n\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        request.approved = true;\\n        emit WithdrawApproved(_builder, _requestId);\\n\\n        if (locked) revert ContractIsLocked();\\n\\n        if (isONETIME) {\\n            _processOneTimeWithdraw(_builder);\\n        } else {\\n            _processStreamWithdraw(_builder, request.amount);\\n        }\\n\\n        request.completed = true;\\n\\n        emit WithdrawCompleted(_builder, _requestId, request.amount, request.projectName);\\n        emit Withdraw(_builder, request.amount, request.reason, request.projectName);\\n    }\\n\\n    /**\\n     * @dev Reject a withdrawal request\\n     * @param _builder Builder address\\n     * @param _requestId ID of the request to reject\\n     */\\n    function rejectWithdraw(address _builder, uint256 _requestId) public onlyAdmin {\\n        if (withdrawRequests[_builder].length <= _requestId) revert WithdrawRequestNotFound();\\n        WithdrawRequest storage request = withdrawRequests[_builder][_requestId];\\n\\n        if (request.completed) revert WithdrawRequestAlreadyCompleted();\\n\\n        // Delete the request by marking it as completed but not approved\\n        request.completed = true;\\n        request.approved = false;\\n        emit WithdrawRejected(_builder, _requestId);\\n    }\\n\\n    /**\\n     * @dev Drain the contract to the primary admin address\\n     * @param _token Token address (zero address for ETH)\\n     */\\n    function drainContract(address _token) public onlyAdmin nonReentrant {\\n        uint256 remainingBalance;\\n\\n        // Drain Ether\\n        if (_token == address(0)) {\\n            remainingBalance = address(this).balance;\\n            if (remainingBalance > 0) {\\n                (bool sent, ) = primaryAdmin.call{ value: remainingBalance }(\\\"\\\");\\n                if (!sent) revert EtherSendingFailed();\\n                emit ContractDrained(remainingBalance);\\n            }\\n            return;\\n        }\\n\\n        // Drain ERC20 tokens\\n        remainingBalance = IERC20(_token).balanceOf(address(this));\\n        if (remainingBalance > 0) {\\n            IERC20(_token).safeTransfer(primaryAdmin, remainingBalance);\\n            emit ContractDrained(remainingBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if an address is an admin\\n     */\\n    function isAdmin(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n}\\n\",\"keccak256\":\"0x773a50677caff73d65477b53978bdf8652d27202659dc62f746db2c6996bece0\",\"license\":\"MIT\"},\"contracts/Abstracts/CohortBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./CohortEvents.sol\\\";\\nimport \\\"./ICohortStructs.sol\\\";\\n\\n/**\\n * @title CohortBase\\n * @dev Base contract containing core functionality and variables for Cohort contracts\\n */\\nabstract contract CohortBase is ICohortStructs, AccessControl, ReentrancyGuard, CohortEvents {\\n    using SafeERC20 for IERC20;\\n\\n    // Constants\\n    uint256 constant MAXCREATORS = 25;\\n    uint256 constant MINIMUM_CAP = 0.00001 ether;\\n    uint256 constant MINIMUM_ERC20_CAP = 1 * 10 ** 6;\\n    uint256 constant MAX_NAME_LENGTH = 40;\\n\\n    // Cohort configuration\\n    uint256 public cycle;\\n    bool public isERC20;\\n    bool public isONETIME;\\n    bool public locked;\\n    bool public requireApprovalForWithdrawals;\\n    string public name;\\n    string public description;\\n    address public tokenAddress;\\n    address public primaryAdmin;\\n\\n    // Builder data\\n    mapping(address => BuilderStreamInfo) public streamingBuilders;\\n    mapping(address => uint256) public builderIndex;\\n    address[] public activeBuilders;\\n\\n    // Withdrawal request data\\n    mapping(address => WithdrawRequest[]) public withdrawRequests;\\n    mapping(address => bool) public requiresApproval;\\n\\n    /**\\n     * @dev Constructor to setup admin role and initial builders\\n     */\\n    constructor(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description,\\n        uint256 _cycle,\\n        address[] memory _builders,\\n        uint256[] memory _caps,\\n        bool _requiresApproval\\n    ) {\\n        if (bytes(_name).length > MAX_NAME_LENGTH) revert MaxNameLength(bytes(_name).length, MAX_NAME_LENGTH);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _primaryAdmin);\\n        primaryAdmin = _primaryAdmin;\\n        name = _name;\\n        description = _description;\\n        cycle = _cycle;\\n        requireApprovalForWithdrawals = _requiresApproval;\\n\\n        if (_tokenAddress != address(0)) {\\n            isERC20 = true;\\n            tokenAddress = _tokenAddress;\\n        }\\n\\n        if (_cycle == 0) {\\n            isONETIME = true;\\n        }\\n\\n        if (_builders.length == 0) return;\\n\\n        uint256 cLength = _builders.length;\\n        if (_builders.length >= MAXCREATORS) revert MaxBuildersReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            validateBuilderInput(payable(_builders[i]), _caps[i]);\\n\\n            if (cycle == 0) {\\n                streamingBuilders[_builders[i]] = BuilderStreamInfo(_caps[i], type(uint256).max);\\n            } else {\\n                streamingBuilders[_builders[i]] = BuilderStreamInfo(_caps[i], block.timestamp - _cycle);\\n            }\\n\\n            activeBuilders.push(_builders[i]);\\n            builderIndex[_builders[i]] = activeBuilders.length - 1;\\n            emit AddBuilder(_builders[i], _caps[i]);\\n\\n            if (_requiresApproval) {\\n                requiresApproval[_builders[i]] = true;\\n                emit ApprovalRequirementChanged(_builders[i], true);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Modifiers\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AccessDenied();\\n        _;\\n    }\\n\\n    modifier isStreamActive(address _builder) {\\n        if (streamingBuilders[_builder].cap == 0) revert NoActiveStreamForBuilder(_builder);\\n        _;\\n    }\\n\\n    modifier isCohortLocked() {\\n        if (locked) revert ContractIsLocked();\\n        _;\\n    }\\n\\n    modifier noPendingRequests(address _builder) {\\n        bool hasPending = false;\\n        uint256 requestCount = withdrawRequests[_builder].length;\\n\\n        for (uint256 i = 0; i < requestCount; ) {\\n            if (!withdrawRequests[_builder][i].completed) {\\n                hasPending = true;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (hasPending) revert PendingWithdrawRequestExists();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates the input for a builder\\n     */\\n    function validateBuilderInput(address payable _builder, uint256 _cap) internal view {\\n        if (_cap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_cap, MINIMUM_CAP);\\n        if (_cap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_cap, MINIMUM_ERC20_CAP);\\n        if (_builder == address(0)) revert InvalidBuilderAddress();\\n        if (hasRole(DEFAULT_ADMIN_ROLE, _builder)) revert InvalidBuilderAddress();\\n        if (streamingBuilders[_builder].cap > 0) revert BuilderAlreadyExists();\\n    }\\n\\n    /**\\n     * @dev Get the unlocked amount for a builder\\n     * @param _builder Builder address\\n     * @return Unlocked amount for the builder\\n     */\\n    function unlockedBuilderAmount(address _builder) public view isStreamActive(_builder) returns (uint256) {\\n        BuilderStreamInfo memory builderStream = streamingBuilders[_builder];\\n\\n        if (isONETIME) {\\n            if (builderStream.last == type(uint256).max) {\\n                return builderStream.cap;\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        uint256 timePassed = block.timestamp - builderStream.last;\\n\\n        if (timePassed < cycle) {\\n            uint256 unlockedAmount = (timePassed * builderStream.cap) / cycle;\\n            return unlockedAmount;\\n        } else {\\n            return builderStream.cap;\\n        }\\n    }\\n\\n    // Fallback function to receive ether\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x0f4df2077ec997e9954da644d16c1d62c69a26d9009d39b55655f9d460ce7865\",\"license\":\"MIT\"},\"contracts/Abstracts/CohortBuilderManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./CohortAdmin.sol\\\";\\n\\n/**\\n * @title CohortBuilderManager\\n * @dev Contract containing functionality for managing builders in a Cohort\\n */\\nabstract contract CohortBuilderManager is CohortAdmin {\\n    struct BuilderData {\\n        address builderAddress;\\n        uint256 cap;\\n        uint256 unlockedAmount;\\n    }\\n\\n    /**\\n     * @dev Get all builders' data\\n     * @param _builders Array of builder addresses\\n     * @return Array of BuilderData for each builder\\n     */\\n    function allBuildersData(address[] calldata _builders) public view returns (BuilderData[] memory) {\\n        uint256 builderLength = _builders.length;\\n        BuilderData[] memory result = new BuilderData[](builderLength);\\n        for (uint256 i = 0; i < builderLength; i++) {\\n            address builderAddress = _builders[i];\\n            BuilderStreamInfo storage builderStream = streamingBuilders[builderAddress];\\n            result[i] = BuilderData(builderAddress, builderStream.cap, unlockedBuilderAmount(builderAddress));\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Add a new builder's stream\\n     * @param _builder Builder address\\n     * @param _cap Maximum amount of funds that can be withdrawn in a cycle\\n     */\\n    function addBuilderStream(address payable _builder, uint256 _cap) public onlyAdmin {\\n        // Check for maximum builders.\\n        if (activeBuilders.length >= MAXCREATORS) revert MaxBuildersReached();\\n\\n        validateBuilderInput(_builder, _cap);\\n\\n        if (isONETIME) {\\n            streamingBuilders[_builder] = BuilderStreamInfo(_cap, type(uint256).max);\\n        } else {\\n            streamingBuilders[_builder] = BuilderStreamInfo(_cap, block.timestamp - cycle);\\n        }\\n\\n        activeBuilders.push(_builder);\\n        builderIndex[_builder] = activeBuilders.length - 1;\\n\\n        if (requireApprovalForWithdrawals) {\\n            requiresApproval[_builder] = true;\\n            emit ApprovalRequirementChanged(_builder, true);\\n        }\\n        emit AddBuilder(_builder, _cap);\\n    }\\n\\n    /**\\n     * @dev Add a batch of builders\\n     * @param _builders Array of builder addresses\\n     * @param _caps Array of cap values\\n     */\\n    function addBatch(address[] memory _builders, uint256[] memory _caps) public onlyAdmin {\\n        uint256 cLength = _builders.length;\\n        if (_builders.length >= MAXCREATORS) revert MaxBuildersReached();\\n        if (cLength != _caps.length) revert LengthsMismatch();\\n        for (uint256 i = 0; i < cLength; ) {\\n            addBuilderStream(payable(_builders[i]), _caps[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Update a builder's stream cap\\n     * @param _builder Builder address\\n     * @param _newCap New cap value\\n     */\\n    function updateBuilderStreamCap(\\n        address payable _builder,\\n        uint256 _newCap\\n    ) public onlyAdmin isStreamActive(_builder) {\\n        if (_newCap < MINIMUM_CAP && !isERC20) revert BelowMinimumCap(_newCap, MINIMUM_CAP);\\n        if (_newCap < MINIMUM_ERC20_CAP && isERC20) revert BelowMinimumCap(_newCap, MINIMUM_ERC20_CAP);\\n\\n        BuilderStreamInfo storage builderStream = streamingBuilders[_builder];\\n\\n        builderStream.cap = _newCap;\\n\\n        if (!isONETIME) {\\n            builderStream.last = block.timestamp - (cycle);\\n        }\\n\\n        emit UpdateBuilder(_builder, _newCap);\\n    }\\n\\n    /**\\n     * @dev Remove a builder's stream\\n     * @param _builder Builder address\\n     */\\n    function removeBuilderStream(address _builder) public onlyAdmin isStreamActive(_builder) {\\n        uint256 builderIndexToRemove = builderIndex[_builder];\\n        address lastBuilder = activeBuilders[activeBuilders.length - 1];\\n\\n        if (_builder != lastBuilder) {\\n            activeBuilders[builderIndexToRemove] = lastBuilder;\\n            builderIndex[lastBuilder] = builderIndexToRemove;\\n        }\\n\\n        activeBuilders.pop();\\n\\n        delete streamingBuilders[_builder];\\n        delete builderIndex[_builder];\\n\\n        emit UpdateBuilder(_builder, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x0999cdc5c07c762ff35e2b0b087d99ab8d4ae18ab2db93f3e9b85d6a473faa4d\",\"license\":\"MIT\"},\"contracts/Abstracts/CohortEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title CohortEvents\\n * @dev Abstract contract containing all events emitted by Cohort contracts\\n */\\nabstract contract CohortEvents {\\n    // Core events\\n    event FundsReceived(address indexed from, uint256 amount);\\n    event Withdraw(address indexed to, uint256 amount, string reason, string projectName);\\n    event AddBuilder(address indexed to, uint256 amount);\\n    event UpdateBuilder(address indexed to, uint256 amount);\\n    event AdminAdded(address indexed to);\\n    event AdminRemoved(address indexed to);\\n    event ContractDrained(uint256 amount);\\n    event PrimaryAdminTransferred(address indexed newAdmin);\\n    event ERC20FundsReceived(address indexed token, address indexed from, uint256 amount);\\n    event ContractLocked(bool locked);\\n\\n    // Withdrawal request events\\n    event WithdrawRequested(\\n        address indexed builder,\\n        uint256 requestId,\\n        uint256 amount,\\n        string reason,\\n        string projectName\\n    );\\n    event WithdrawApproved(address indexed builder, uint256 requestId);\\n    event WithdrawRejected(address indexed builder, uint256 requestId);\\n    event WithdrawCompleted(address indexed builder, uint256 requestId, uint256 amount, string projectName);\\n    event ApprovalRequirementChanged(address indexed builder, bool requiresApproval);\\n}\\n\",\"keccak256\":\"0x6db1a251f75d80e165e7f71443d234262f7fa1d08e734a2277a52f0b62e78533\",\"license\":\"MIT\"},\"contracts/Abstracts/CohortFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./CohortWithdrawal.sol\\\";\\n\\n/**\\n * @title CohortFunding\\n * @dev Contract containing functionality for funding a Cohort\\n */\\nabstract contract CohortFunding is CohortWithdrawal {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Fund the contract with ETH or ERC20 tokens\\n     * @param _amount Amount to fund (for ERC20 tokens)\\n     */\\n    function fundContract(uint256 _amount) public payable {\\n        if (!isERC20) {\\n            if (msg.value == 0) revert NoValueSent();\\n            emit FundsReceived(msg.sender, msg.value);\\n        } else {\\n            if (_amount == 0) revert NoValueSent();\\n\\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            emit ERC20FundsReceived(tokenAddress, msg.sender, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x95219a7aa401834a98288157802070675f0d0023b70d02c14ac4934804ed80b0\",\"license\":\"MIT\"},\"contracts/Abstracts/CohortWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./CohortBuilderManager.sol\\\";\\n\\n/**\\n * @title CohortWithdrawal\\n * @dev Contract containing functionality for withdrawals in a Cohort\\n */\\nabstract contract CohortWithdrawal is CohortBuilderManager {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Request a withdrawal for builders that require approval\\n     * @param _amount Amount to withdraw\\n     * @param _reason Reason for withdrawal\\n     */\\n    function _requestWithdraw(\\n        uint256 _amount,\\n        string memory _reason,\\n        string memory _projectName\\n    ) private noPendingRequests(msg.sender) {\\n        // Check if the builder has enough unlocked to withdraw\\n        uint256 totalAmountCanWithdraw = unlockedBuilderAmount(msg.sender);\\n        if (totalAmountCanWithdraw < _amount) {\\n            revert InsufficientInStream(_amount, totalAmountCanWithdraw);\\n        }\\n\\n        // Create withdrawal request\\n        withdrawRequests[msg.sender].push(\\n            WithdrawRequest({\\n                amount: _amount,\\n                reason: _reason,\\n                approved: false,\\n                completed: false,\\n                requestTime: block.timestamp,\\n                projectName: _projectName\\n            })\\n        );\\n\\n        uint256 requestId = withdrawRequests[msg.sender].length - 1;\\n        emit WithdrawRequested(msg.sender, requestId, _amount, _reason, _projectName);\\n    }\\n\\n    /**\\n     * @dev Stream withdraw for a builder\\n     * @param _amount Amount to withdraw\\n     * @param _reason Reason for withdrawal\\n     */\\n    function streamWithdraw(\\n        uint256 _amount,\\n        string memory _reason,\\n        string memory _projectName\\n    ) public isStreamActive(msg.sender) nonReentrant isCohortLocked {\\n        if (requiresApproval[msg.sender]) {\\n            _requestWithdraw(_amount, _reason, _projectName);\\n            return;\\n        }\\n\\n        if (isONETIME) {\\n            _processOneTimeWithdraw(msg.sender);\\n        } else {\\n            _processStreamWithdraw(msg.sender, _amount);\\n        }\\n\\n        emit Withdraw(msg.sender, _amount, _reason, _projectName);\\n    }\\n}\\n\",\"keccak256\":\"0xa00b439721ae776ebd677ecbd1836430b0db49e4640b50c314cd3dda12527bd9\",\"license\":\"MIT\"},\"contracts/Abstracts/ICohortStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title ICohortStructs\\n * @dev Interface defining common structures and errors used across cohort contracts\\n */\\ninterface ICohortStructs {\\n    // Builder stream information\\n    struct BuilderStreamInfo {\\n        uint256 cap; // Maximum amount of funds that can be withdrawn in a cycle\\n        uint256 last; // The timestamp of the last withdrawal\\n    }\\n\\n    // Withdrawal request structure\\n    struct WithdrawRequest {\\n        uint256 amount;\\n        string reason;\\n        bool approved;\\n        bool completed;\\n        uint256 requestTime;\\n        string projectName;\\n    }\\n\\n    // Custom errors\\n    error NoValueSent();\\n    error InsufficientFundsInContract(uint256 requested, uint256 unlocked);\\n    error NoActiveStreamForBuilder(address builder);\\n    error InsufficientInStream(uint256 requested, uint256 unlocked);\\n    error EtherSendingFailed();\\n    error LengthsMismatch();\\n    error InvalidBuilderAddress();\\n    error BuilderAlreadyExists();\\n    error ContractIsLocked();\\n    error MaxBuildersReached();\\n    error AccessDenied();\\n    error InvalidTokenAddress();\\n    error NoFundsInContract();\\n    error ERC20TransferFailed();\\n    error ERC20SendingFailed(address token, address recipient);\\n    error ERC20FundsTransferFailed(address token, address to, uint256 amount);\\n    error BelowMinimumCap(uint256 provided, uint256 minimum);\\n    error NotAuthorized();\\n    error InvalidNewAdminAddress();\\n    error MaxNameLength(uint256 providedLength, uint256 maxLength);\\n    error NoWithdrawRequest();\\n    error WithdrawRequestNotApproved();\\n    error WithdrawRequestAlreadyCompleted();\\n    error WithdrawRequestNotFound();\\n    error PendingWithdrawRequestExists();\\n    error AlreadyWithdrawnOneTime();\\n}\\n\",\"keccak256\":\"0x6991be5e428ced243c3fcc223ed6af3ee31994d5b8b9ce4d109c0e91ae6bace5\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Abstracts/CohortFunding.sol\\\";\\n\\n/**\\n * @title Cohort\\n * @dev Main contract for streaming ETH or ERC20 tokens to builders\\n * Inherits all functionality from modular contracts\\n */\\ncontract Cohort is CohortFunding {\\n    /**\\n     * @dev Constructor that passes parameters to the base contract\\n     * @param _primaryAdmin Address of the primary admin\\n     * @param _tokenAddress Address of ERC20 token (zero address for ETH)\\n     * @param _name Name of the cohort\\n     * @param _description Description of the cohort\\n     * @param _cycle Cycle duration\\n     * @param _builders Array of builder addresses\\n     * @param _caps Array of cap values for builders\\n     * @param _requiresApproval Whether withdrawals require approval\\n     */\\n    constructor(\\n        address _primaryAdmin,\\n        address _tokenAddress,\\n        string memory _name,\\n        string memory _description,\\n        uint256 _cycle,\\n        address[] memory _builders,\\n        uint256[] memory _caps,\\n        bool _requiresApproval\\n    ) CohortBase(_primaryAdmin, _tokenAddress, _name, _description, _cycle, _builders, _caps, _requiresApproval) {}\\n}\\n\",\"keccak256\":\"0x93cac73ecfc89211893c12059fd68a8ce9bcba27304f28dba9699a850a0ab9e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003fa138038062003fa18339810160408190526200003491620008c8565b8787878787878787600180819055506028865111156200007957855160405163062a8dff60e41b81526004810191909152602860248201526044015b60405180910390fd5b62000086600089620004f7565b600780546001600160a01b0319166001600160a01b038a161790556004620000af878262000a53565b506005620000be868262000a53565b5060028490556003805463ff00000019166301000000831515021790556001600160a01b0387161562000116576003805460ff19166001179055600680546001600160a01b0389166001600160a01b03199091161790555b836000036200012f576003805461ff0019166101001790555b825115620004e1578251601981106200015b5760405163104e7cef60e31b815260040160405180910390fd5b825181146200017d5760405163586cb9e160e01b815260040160405180910390fd5b60005b81811015620004de57620001d3858281518110620001a257620001a262000b1f565b6020026020010151858381518110620001bf57620001bf62000b1f565b60200260200101516200058060201b60201c565b60025460000362000261576040518060400160405280858381518110620001fe57620001fe62000b1f565b60200260200101518152602001600019815250600860008784815181106200022a576200022a62000b1f565b6020908102919091018101516001600160a01b031682528181019290925260400160002082518155910151600190910155620002ea565b604051806040016040528085838151811062000281576200028162000b1f565b6020026020010151815260200187426200029c919062000b35565b81525060086000878481518110620002b857620002b862000b1f565b6020908102919091018101516001600160a01b0316825281810192909252604001600020825181559101516001909101555b600a85828151811062000301576200030162000b1f565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155600a546200034f919062000b35565b6009600087848151811062000368576200036862000b1f565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550848181518110620003a957620003a962000b1f565b60200260200101516001600160a01b03167f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c3858381518110620003f057620003f062000b1f565b60200260200101516040516200040891815260200190565b60405180910390a28215620004d5576001600c600087848151811062000432576200043262000b1f565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555084818151811062000486576200048662000b1f565b60200260200101516001600160a01b03167f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b6001604051620004cc911515815260200190565b60405180910390a25b60010162000180565b50505b5050505050505050505050505050505062000b57565b62000503828262000695565b6200057c576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200053b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6509184e72a0008110801562000599575060035460ff16155b15620005c85760405163c281dd3b60e01b8152600481018290526509184e72a000602482015260440162000070565b620f424081108015620005dd575060035460ff165b15620006095760405163c281dd3b60e01b815260048101829052620f4240602482015260440162000070565b6001600160a01b038216620006315760405163094d784960e21b815260040160405180910390fd5b6200063e60008362000695565b156200065d5760405163094d784960e21b815260040160405180910390fd5b6001600160a01b038216600090815260086020526040902054156200057c57604051637fe8efbb60e01b815260040160405180910390fd5b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b80516001600160a01b0381168114620006d857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200071e576200071e620006dd565b604052919050565b600082601f8301126200073857600080fd5b81516001600160401b03811115620007545762000754620006dd565b60206200076a601f8301601f19168201620006f3565b82815285828487010111156200077f57600080fd5b60005b838110156200079f57858101830151828201840152820162000782565b506000928101909101919091529392505050565b60006001600160401b03821115620007cf57620007cf620006dd565b5060051b60200190565b600082601f830112620007eb57600080fd5b8151602062000804620007fe83620007b3565b620006f3565b82815260059290921b840181019181810190868411156200082457600080fd5b8286015b848110156200084a576200083c81620006c0565b835291830191830162000828565b509695505050505050565b600082601f8301126200086757600080fd5b815160206200087a620007fe83620007b3565b82815260059290921b840181019181810190868411156200089a57600080fd5b8286015b848110156200084a57805183529183019183016200089e565b80518015158114620006d857600080fd5b600080600080600080600080610100898b031215620008e657600080fd5b620008f189620006c0565b97506200090160208a01620006c0565b60408a01519097506001600160401b03808211156200091f57600080fd5b6200092d8c838d0162000726565b975060608b01519150808211156200094457600080fd5b620009528c838d0162000726565b965060808b0151955060a08b01519150808211156200097057600080fd5b6200097e8c838d01620007d9565b945060c08b01519150808211156200099557600080fd5b50620009a48b828c0162000855565b925050620009b560e08a01620008b7565b90509295985092959890939650565b600181811c90821680620009d957607f821691505b602082108103620009fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000a4e57600081815260208120601f850160051c8101602086101562000a295750805b601f850160051c820191505b8181101562000a4a5782815560010162000a35565b5050505b505050565b81516001600160401b0381111562000a6f5762000a6f620006dd565b62000a878162000a808454620009c4565b8462000a00565b602080601f83116001811462000abf576000841562000aa65750858301515b600019600386901b1c1916600185901b17855562000a4a565b600085815260208120601f198616915b8281101562000af05788860151825594840194600190910190840162000acf565b508582101562000b0f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b81810381811115620006ba57634e487b7160e01b600052601160045260246000fd5b61343a8062000b676000396000f3fe6080604052600436106102285760003560e01c80636d6ca319116101235780639de1b23d116100ab578063af4025321161006f578063af402532146106d6578063b19cb810146106f6578063c3181b9014610715578063cf30901214610735578063d547741f1461075557600080fd5b80639de1b23d14610634578063a217fddf14610654578063a46495ac14610669578063a4adcb6114610696578063a7839334146106b657600080fd5b80638216d506116100f25780638216d5061461057c57806382c2aff71461059c5780638c0a2d56146105bc57806391d14854146105dc5780639d76ea58146105fc57600080fd5b80636d6ca319146104e85780637284e4161461051a5780637c6f1b591461052f57806380c9b2f61461055c57600080fd5b806329d36c46116101b157806336568abe1161017557806336568abe14610429578063377c9815146104495780634e1ca120146104925780636190c9d5146104b257806365cd2a4e146104c857600080fd5b806329d36c461461039c5780632eb67f53146103bc5780632f2ff15d146103d65780633109b16e146103f65780633519a2f81461041657600080fd5b80630ca2c6a9116101f85780630ca2c6a9146102dd5780630d12cc68146102fe578063116e72db1461031e578063248a9ca31461033e57806324d7806c1461037c57600080fd5b806208359d1461023457806301ffc9a71461025657806306fdde031461028b578063070092d4146102ad57600080fd5b3661022f57005b600080fd5b34801561024057600080fd5b5061025461024f366004612ab9565b610775565b005b34801561026257600080fd5b50610276610271366004612af2565b610847565b60405190151581526020015b60405180910390f35b34801561029757600080fd5b506102a061087e565b6040516102829190612b6c565b3480156102b957600080fd5b506102766102c8366004612b7f565b600c6020526000908152604090205460ff1681565b3480156102e957600080fd5b50600354610276906301000000900460ff1681565b34801561030a57600080fd5b50610254610319366004612c72565b61090c565b34801561032a57600080fd5b50610254610339366004612ab9565b6109cd565b34801561034a57600080fd5b5061036e610359366004612d34565b60009081526020819052604090206001015490565b604051908152602001610282565b34801561038857600080fd5b50610276610397366004612b7f565b610ae8565b3480156103a857600080fd5b506102546103b7366004612d4d565b610af4565b3480156103c857600080fd5b506003546102769060ff1681565b3480156103e257600080fd5b506102546103f1366004612d79565b610c0c565b34801561040257600080fd5b50610254610411366004612d9e565b610c36565b610254610424366004612d34565b610cb8565b34801561043557600080fd5b50610254610444366004612d79565b610d94565b34801561045557600080fd5b5061047d610464366004612b7f565b6008602052600090815260409020805460019091015482565b60408051928352602083019190915201610282565b34801561049e57600080fd5b506102546104ad366004612d4d565b610e0e565b3480156104be57600080fd5b5061036e60025481565b3480156104d457600080fd5b506102546104e3366004612d9e565b61105c565b3480156104f457600080fd5b50610508610503366004612d4d565b6110da565b60405161028296959493929190612dbb565b34801561052657600080fd5b506102a061124c565b34801561053b57600080fd5b5061054f61054a366004612e09565b611259565b6040516102829190612e7e565b34801561056857600080fd5b5061036e610577366004612b7f565b611388565b34801561058857600080fd5b50610254610597366004612d4d565b61147d565b3480156105a857600080fd5b506102546105b7366004612d4d565b6115f2565b3480156105c857600080fd5b506102546105d7366004612b7f565b611807565b3480156105e857600080fd5b506102766105f7366004612d79565b6118c5565b34801561060857600080fd5b5060065461061c906001600160a01b031681565b6040516001600160a01b039091168152602001610282565b34801561064057600080fd5b5060075461061c906001600160a01b031681565b34801561066057600080fd5b5061036e600081565b34801561067557600080fd5b5061036e610684366004612b7f565b60096020526000908152604090205481565b3480156106a257600080fd5b506102546106b1366004612b7f565b6118ee565b3480156106c257600080fd5b5061061c6106d1366004612d34565b611acb565b3480156106e257600080fd5b506102546106f1366004612b7f565b611af5565b34801561070257600080fd5b5060035461027690610100900460ff1681565b34801561072157600080fd5b50610254610730366004612f50565b611c99565b34801561074157600080fd5b506003546102769062010000900460ff1681565b34801561076157600080fd5b50610254610770366004612d79565b611dc4565b6107806000336118c5565b61079d57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260408120548391036107e65760405163f4c8fba360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b0383166000818152600c6020908152604091829020805460ff191686151590811790915591519182527f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b91015b60405180910390a2505050565b60006001600160e01b03198216637965db0b60e01b148061087857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6004805461088b90612fbd565b80601f01602080910402602001604051908101604052809291908181526020018280546108b790612fbd565b80156109045780601f106108d957610100808354040283529160200191610904565b820191906000526020600020905b8154815290600101906020018083116108e757829003601f168201915b505050505081565b6109176000336118c5565b61093457604051634ca8886760e01b815260040160405180910390fd5b8151601981106109575760405163104e7cef60e31b815260040160405180910390fd5b815181146109785760405163586cb9e160e01b815260040160405180910390fd5b60005b818110156109c7576109bf84828151811061099857610998612ff1565b60200260200101518483815181106109b2576109b2612ff1565b60200260200101516115f2565b60010161097b565b50505050565b6109d86000336118c5565b6109f557604051634ca8886760e01b815260040160405180910390fd5b8015610a75576001600160a01b03821660009081526008602052604090205415610a325760405163094d784960e21b815260040160405180910390fd5b610a3d600083610c0c565b6040516001600160a01b038316907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a25050565b6007546001600160a01b0390811690831603610aa457604051634ca8886760e01b815260040160405180910390fd5b610aaf600083611dc4565b6040516001600160a01b038316907fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90600090a25b5050565b600061087881836118c5565b610aff6000336118c5565b610b1c57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260409020548110610b5457604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260408120805483908110610b7e57610b7e612ff1565b906000526020600020906005020190508060020160019054906101000a900460ff1615610bbe57604051635a4a8a4360e11b815260040160405180910390fd5b60028101805461ffff19166101001790556040516001600160a01b038416907f019d1297aa228eef7dd79b31640282cbe91fbc09dc0cbf5000ca5abf728059899061083a9085815260200190565b600082815260208190526040902060010154610c2781611de9565b610c318383611df3565b505050565b610c416000336118c5565b610c5e57604051634ca8886760e01b815260040160405180910390fd5b6003805482151563010000000263ff0000001990911617905560405130907f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b90610cad90841515815260200190565b60405180910390a250565b60035460ff16610d155734600003610ce3576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f90602001610cad565b80600003610d36576040516327738acf60e21b815260040160405180910390fd5b600654610d4e906001600160a01b0316333084611e77565b60065460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b0381163314610e045760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107dd565b610ae48282611ee2565b610e196000336118c5565b610e3657604051634ca8886760e01b815260040160405180910390fd5b600260015403610e585760405162461bcd60e51b81526004016107dd90613007565b60026001556001600160a01b0382166000908152600b60205260409020548110610e9557604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260408120805483908110610ebf57610ebf612ff1565b906000526020600020906005020190508060020160019054906101000a900460ff1615610eff57604051635a4a8a4360e11b815260040160405180910390fd5b60028101805460ff191660011790556040516001600160a01b038416907f6f856c863eba32b6aca7d24f96817572a1f48382957c3dc9e8d4741f38afd72e90610f4b9085815260200190565b60405180910390a260035462010000900460ff1615610f7d5760405163af9e1b4360e01b815260040160405180910390fd5b600354610100900460ff1615610f9b57610f9683611f47565b610fa9565b610fa98382600001546120f6565b60028101805461ff00191661010017905580546040516001600160a01b038516917fba31eb1284fda4ab53229aad3cf178a52e96f04ef1a58f6da7bee5b02c6f61e991610ffc91869160048701906130bb565b60405180910390a2826001600160a01b03167fbf4bee5506452a156854c54e249d6b04b0cd83287ba208202be81a4f87a557398260000154836001018460040160405161104b939291906130e3565b60405180910390a250506001805550565b6110676000336118c5565b61108457604051634ca8886760e01b815260040160405180910390fd5b60038054821515620100000262ff0000199091161790556040517fb08f70f6219c5c2ed5e08e7cf45080e4840fde880b27a0841faf45475cd02d2e906110cf90831515815260200190565b60405180910390a150565b600b60205281600052604060002081815481106110f657600080fd5b90600052602060002090600502016000915091505080600001549080600101805461112090612fbd565b80601f016020809104026020016040519081016040528092919081815260200182805461114c90612fbd565b80156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b5050505060028301546003840154600485018054949560ff8085169661010090950416945091926111c990612fbd565b80601f01602080910402602001604051908101604052809291908181526020018280546111f590612fbd565b80156112425780601f1061121757610100808354040283529160200191611242565b820191906000526020600020905b81548152906001019060200180831161122557829003601f168201915b5050505050905086565b6005805461088b90612fbd565b60608160008167ffffffffffffffff81111561127757611277612b9c565b6040519080825280602002602001820160405280156112d557816020015b6112c2604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816112955790505b50905060005b8281101561137f5760008686838181106112f7576112f7612ff1565b905060200201602081019061130c9190612b7f565b6001600160a01b0381166000818152600860209081526040918290208251606081018452938452805491840191909152929350810161134a84611388565b81525084848151811061135f5761135f612ff1565b6020026020010181905250505080806113779061312e565b9150506112db565b50949350505050565b6001600160a01b038116600090815260086020526040812054829082036113cd5760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b6001600160a01b0383166000908152600860209081526040918290208251808401909352805483526001015490820152600354610100900460ff161561142c5760001981602001510361142257519150611477565b6000925050611477565b600081602001514261143e9190613147565b90506002548110156114725760025482516000919061145d908461315a565b6114679190613171565b945061147792505050565b505191505b50919050565b6114886000336118c5565b6114a557604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260408120548391036114e95760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b6509184e72a00082108015611501575060035460ff16155b1561152e5760405163c281dd3b60e01b8152600481018390526509184e72a00060248201526044016107dd565b620f424082108015611542575060035460ff165b1561156c5760405163c281dd3b60e01b815260048101839052620f424060248201526044016107dd565b6001600160a01b0383166000908152600860205260409020828155600354610100900460ff166115a9576002546115a39042613147565b60018201555b836001600160a01b03167f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5846040516115e491815260200190565b60405180910390a250505050565b6115fd6000336118c5565b61161a57604051634ca8886760e01b815260040160405180910390fd5b600a5460191161163d5760405163104e7cef60e31b815260040160405180910390fd5b6116478282612308565b600354610100900460ff16156116975760408051808201825282815260001960208083019182526001600160a01b03861660009081526008909152929092209051815590516001909101556116e1565b6040518060400160405280828152602001600254426116b69190613147565b90526001600160a01b0383166000908152600860209081526040909120825181559101516001909101555b600a80546001808201835560008390527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890910180546001600160a01b0319166001600160a01b038616179055905461173a9190613147565b6001600160a01b0383166000908152600960205260409020556003546301000000900460ff16156117c0576001600160a01b0382166000818152600c6020908152604091829020805460ff1916600190811790915591519182527f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b910160405180910390a25b816001600160a01b03167f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c3826040516117fb91815260200190565b60405180910390a25050565b6007546001600160a01b031633146118325760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166118595760405163b5aaecfd60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b03831690811790915561188390600090611ee2565b61188e600082611df3565b6040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6118f96000336118c5565b61191657604051634ca8886760e01b815260040160405180910390fd5b6002600154036119385760405162461bcd60e51b81526004016107dd90613007565b600260015560006001600160a01b038216611a0457504780156119fe576007546040516000916001600160a01b03169083908381818185875af1925050503d80600081146119a2576040519150601f19603f3d011682016040523d82523d6000602084013e6119a7565b606091505b50509050806119c957604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a1505b50611ac4565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c9190613193565b90508015611ac257600754611a8e906001600160a01b03848116911683612412565b6040518181527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a15b505b5060018055565b600a8181548110611adb57600080fd5b6000918252602090912001546001600160a01b0316905081565b611b006000336118c5565b611b1d57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b038116600090815260086020526040812054829103611b615760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b6001600160a01b038216600090815260096020526040812054600a8054919291611b8d90600190613147565b81548110611b9d57611b9d612ff1565b6000918252602090912001546001600160a01b03908116915084168114611c0c5780600a8381548110611bd257611bd2612ff1565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526009909152604090208290555b600a805480611c1d57611c1d6131ac565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0386168083526008825260408084208481556001018490556009835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d591016115e4565b336000818152600860205260408120549003611cd35760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b600260015403611cf55760405162461bcd60e51b81526004016107dd90613007565b600260015560035462010000900460ff1615611d245760405163af9e1b4360e01b815260040160405180910390fd5b336000908152600c602052604090205460ff1615611d4c57611d47848484612442565b611dba565b600354610100900460ff1615611d6a57611d6533611f47565b611d74565b611d7433856120f6565b336001600160a01b03167fbf4bee5506452a156854c54e249d6b04b0cd83287ba208202be81a4f87a55739858585604051611db1939291906131c2565b60405180910390a25b5050600180555050565b600082815260208190526040902060010154611ddf81611de9565b610c318383611ee2565b610d91813361263c565b611dfd82826118c5565b610ae4576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e333390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040516001600160a01b03808516602483015283166044820152606481018290526109c79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526126a0565b611eec82826118c5565b15610ae4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0381166000908152600860205260409020600181015460001914611f8557604051632de4346760e11b815260040160405180910390fd5b805460035460ff16612038574781811015611fbd57604051631508de4560e01b815260048101839052602481018290526044016107dd565b6000846001600160a01b03168360405160006040518083038185875af1925050503d806000811461200a576040519150601f19603f3d011682016040523d82523d6000602084013e61200f565b606091505b505090508061203157604051637d6a86b760e11b815260040160405180910390fd5b50506120eb565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a59190613193565b9050818110156120d257604051631508de4560e01b815260048101839052602481018290526044016107dd565b6006546120e9906001600160a01b03168584612412565b505b504260019091015550565b600061210183611388565b90508181101561212e5760405163ba49c84f60e01b815260048101839052602481018290526044016107dd565b6001600160a01b038316600090815260086020526040812060018101546002549192909161215c9042613147565b90508082101561216a578091505b60035460ff1661221b5747858110156121a057604051631508de4560e01b815260048101879052602481018290526044016107dd565b6000876001600160a01b03168760405160006040518083038185875af1925050503d80600081146121ed576040519150601f19603f3d011682016040523d82523d6000602084013e6121f2565b606091505b505090508061221457604051637d6a86b760e11b815260040160405180910390fd5b50506122ce565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122889190613193565b9050858110156122b557604051631508de4560e01b815260048101879052602481018290526044016107dd565b6006546122cc906001600160a01b03168888612412565b505b83856122da8442613147565b6122e4919061315a565b6122ee9190613171565b6122f890836131ed565b8360010181905550505050505050565b6509184e72a00081108015612320575060035460ff16155b1561234d5760405163c281dd3b60e01b8152600481018290526509184e72a00060248201526044016107dd565b620f424081108015612361575060035460ff165b1561238b5760405163c281dd3b60e01b815260048101829052620f424060248201526044016107dd565b6001600160a01b0382166123b25760405163094d784960e21b815260040160405180910390fd5b6123bd6000836118c5565b156123db5760405163094d784960e21b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415610ae457604051637fe8efbb60e01b815260040160405180910390fd5b6040516001600160a01b038316602482015260448101829052610c3190849063a9059cbb60e01b90606401611eab565b336000818152600b6020526040812054815b818110156124ba576001600160a01b0384166000908152600b6020526040902080548290811061248657612486612ff1565b906000526020600020906005020160020160019054906101000a900460ff166124b257600192506124ba565b600101612454565b5081156124da5760405163ef97f13b60e01b815260040160405180910390fd5b60006124e533611388565b9050868110156125125760405163ba49c84f60e01b815260048101889052602481018290526044016107dd565b336000908152600b60209081526040808320815160c0810183528b81528084018b81529281018590526060810185905242608082015260a081018a905281546001818101845592865293909420845160059094020192835590519082019061257a908261324e565b506040820151600282018054606085015115156101000261ff00199315159390931661ffff19909116179190911790556080820151600382015560a082015160048201906125c8908261324e565b5050336000908152600b60205260408120549091506125e990600190613147565b9050336001600160a01b03167f967424654a31575708743338dfa2677684aab1fa5e437849a9bfa81176fea693828a8a8a60405161262a949392919061330e565b60405180910390a25050505050505050565b61264682826118c5565b610ae45761265e816001600160a01b03166014612772565b612669836020612772565b60405160200161267a92919061333f565b60408051601f198184030181529082905262461bcd60e51b82526107dd91600401612b6c565b60006126f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129159092919063ffffffff16565b805190915015610c31578080602001905181019061271391906133b4565b610c315760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107dd565b6060600061278183600261315a565b61278c9060026131ed565b67ffffffffffffffff8111156127a4576127a4612b9c565b6040519080825280601f01601f1916602001820160405280156127ce576020820181803683370190505b509050600360fc1b816000815181106127e9576127e9612ff1565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061281857612818612ff1565b60200101906001600160f81b031916908160001a905350600061283c84600261315a565b6128479060016131ed565b90505b60018111156128bf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061287b5761287b612ff1565b1a60f81b82828151811061289157612891612ff1565b60200101906001600160f81b031916908160001a90535060049490941c936128b8816133d1565b905061284a565b50831561290e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107dd565b9392505050565b6060612924848460008561292c565b949350505050565b60608247101561298d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107dd565b6001600160a01b0385163b6129e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107dd565b600080866001600160a01b03168587604051612a0091906133e8565b60006040518083038185875af1925050503d8060008114612a3d576040519150601f19603f3d011682016040523d82523d6000602084013e612a42565b606091505b5091509150612a52828286612a5d565b979650505050505050565b60608315612a6c57508161290e565b825115612a7c5782518084602001fd5b8160405162461bcd60e51b81526004016107dd9190612b6c565b6001600160a01b0381168114610d9157600080fd5b8015158114610d9157600080fd5b60008060408385031215612acc57600080fd5b8235612ad781612a96565b91506020830135612ae781612aab565b809150509250929050565b600060208284031215612b0457600080fd5b81356001600160e01b03198116811461290e57600080fd5b60005b83811015612b37578181015183820152602001612b1f565b50506000910152565b60008151808452612b58816020860160208601612b1c565b601f01601f19169290920160200192915050565b60208152600061290e6020830184612b40565b600060208284031215612b9157600080fd5b813561290e81612a96565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612bdb57612bdb612b9c565b604052919050565b600067ffffffffffffffff821115612bfd57612bfd612b9c565b5060051b60200190565b600082601f830112612c1857600080fd5b81356020612c2d612c2883612be3565b612bb2565b82815260059290921b84018101918181019086841115612c4c57600080fd5b8286015b84811015612c675780358352918301918301612c50565b509695505050505050565b60008060408385031215612c8557600080fd5b823567ffffffffffffffff80821115612c9d57600080fd5b818501915085601f830112612cb157600080fd5b81356020612cc1612c2883612be3565b82815260059290921b84018101918181019089841115612ce057600080fd5b948201945b83861015612d07578535612cf881612a96565b82529482019490820190612ce5565b96505086013592505080821115612d1d57600080fd5b50612d2a85828601612c07565b9150509250929050565b600060208284031215612d4657600080fd5b5035919050565b60008060408385031215612d6057600080fd5b8235612d6b81612a96565b946020939093013593505050565b60008060408385031215612d8c57600080fd5b823591506020830135612ae781612a96565b600060208284031215612db057600080fd5b813561290e81612aab565b86815260c060208201526000612dd460c0830188612b40565b8615156040840152851515606084015284608084015282810360a0840152612dfc8185612b40565b9998505050505050505050565b60008060208385031215612e1c57600080fd5b823567ffffffffffffffff80821115612e3457600080fd5b818501915085601f830112612e4857600080fd5b813581811115612e5757600080fd5b8660208260051b8501011115612e6c57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015612ed357815180516001600160a01b0316855286810151878601528501518585015260609093019290850190600101612e9b565b5091979650505050505050565b600082601f830112612ef157600080fd5b813567ffffffffffffffff811115612f0b57612f0b612b9c565b612f1e601f8201601f1916602001612bb2565b818152846020838601011115612f3357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215612f6557600080fd5b83359250602084013567ffffffffffffffff80821115612f8457600080fd5b612f9087838801612ee0565b93506040860135915080821115612fa657600080fd5b50612fb386828701612ee0565b9150509250925092565b600181811c90821680612fd157607f821691505b60208210810361147757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000815461304b81612fbd565b8085526020600183811680156130685760018114613082576130b0565b60ff1985168884015283151560051b8801830195506130b0565b866000528260002060005b858110156130a85781548a820186015290830190840161308d565b890184019650505b505050505092915050565b8381528260208201526060604082015260006130da606083018461303e565b95945050505050565b8381526060602082015260006130fc606083018561303e565b828103604084015261310e818561303e565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161314057613140613118565b5060010190565b8181038181111561087857610878613118565b808202811582820484141761087857610878613118565b60008261318e57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156131a557600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b8381526060602082015260006131db6060830185612b40565b828103604084015261310e8185612b40565b8082018082111561087857610878613118565b601f821115610c3157600081815260208120601f850160051c810160208610156132275750805b601f850160051c820191505b8181101561324657828155600101613233565b505050505050565b815167ffffffffffffffff81111561326857613268612b9c565b61327c816132768454612fbd565b84613200565b602080601f8311600181146132b157600084156132995750858301515b600019600386901b1c1916600185901b178555613246565b600085815260208120601f198616915b828110156132e0578886015182559484019460019091019084016132c1565b50858210156132fe5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815283602082015260806040820152600061332d6080830185612b40565b8281036060840152612a528185612b40565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613377816017850160208801612b1c565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133a8816028840160208801612b1c565b01602801949350505050565b6000602082840312156133c657600080fd5b815161290e81612aab565b6000816133e0576133e0613118565b506000190190565b600082516133fa818460208701612b1c565b919091019291505056fea26469706673582212206bf2236162ab29b7745e8a27e33e36ae85c62fb42feb5d51146a20275435d4d664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102285760003560e01c80636d6ca319116101235780639de1b23d116100ab578063af4025321161006f578063af402532146106d6578063b19cb810146106f6578063c3181b9014610715578063cf30901214610735578063d547741f1461075557600080fd5b80639de1b23d14610634578063a217fddf14610654578063a46495ac14610669578063a4adcb6114610696578063a7839334146106b657600080fd5b80638216d506116100f25780638216d5061461057c57806382c2aff71461059c5780638c0a2d56146105bc57806391d14854146105dc5780639d76ea58146105fc57600080fd5b80636d6ca319146104e85780637284e4161461051a5780637c6f1b591461052f57806380c9b2f61461055c57600080fd5b806329d36c46116101b157806336568abe1161017557806336568abe14610429578063377c9815146104495780634e1ca120146104925780636190c9d5146104b257806365cd2a4e146104c857600080fd5b806329d36c461461039c5780632eb67f53146103bc5780632f2ff15d146103d65780633109b16e146103f65780633519a2f81461041657600080fd5b80630ca2c6a9116101f85780630ca2c6a9146102dd5780630d12cc68146102fe578063116e72db1461031e578063248a9ca31461033e57806324d7806c1461037c57600080fd5b806208359d1461023457806301ffc9a71461025657806306fdde031461028b578063070092d4146102ad57600080fd5b3661022f57005b600080fd5b34801561024057600080fd5b5061025461024f366004612ab9565b610775565b005b34801561026257600080fd5b50610276610271366004612af2565b610847565b60405190151581526020015b60405180910390f35b34801561029757600080fd5b506102a061087e565b6040516102829190612b6c565b3480156102b957600080fd5b506102766102c8366004612b7f565b600c6020526000908152604090205460ff1681565b3480156102e957600080fd5b50600354610276906301000000900460ff1681565b34801561030a57600080fd5b50610254610319366004612c72565b61090c565b34801561032a57600080fd5b50610254610339366004612ab9565b6109cd565b34801561034a57600080fd5b5061036e610359366004612d34565b60009081526020819052604090206001015490565b604051908152602001610282565b34801561038857600080fd5b50610276610397366004612b7f565b610ae8565b3480156103a857600080fd5b506102546103b7366004612d4d565b610af4565b3480156103c857600080fd5b506003546102769060ff1681565b3480156103e257600080fd5b506102546103f1366004612d79565b610c0c565b34801561040257600080fd5b50610254610411366004612d9e565b610c36565b610254610424366004612d34565b610cb8565b34801561043557600080fd5b50610254610444366004612d79565b610d94565b34801561045557600080fd5b5061047d610464366004612b7f565b6008602052600090815260409020805460019091015482565b60408051928352602083019190915201610282565b34801561049e57600080fd5b506102546104ad366004612d4d565b610e0e565b3480156104be57600080fd5b5061036e60025481565b3480156104d457600080fd5b506102546104e3366004612d9e565b61105c565b3480156104f457600080fd5b50610508610503366004612d4d565b6110da565b60405161028296959493929190612dbb565b34801561052657600080fd5b506102a061124c565b34801561053b57600080fd5b5061054f61054a366004612e09565b611259565b6040516102829190612e7e565b34801561056857600080fd5b5061036e610577366004612b7f565b611388565b34801561058857600080fd5b50610254610597366004612d4d565b61147d565b3480156105a857600080fd5b506102546105b7366004612d4d565b6115f2565b3480156105c857600080fd5b506102546105d7366004612b7f565b611807565b3480156105e857600080fd5b506102766105f7366004612d79565b6118c5565b34801561060857600080fd5b5060065461061c906001600160a01b031681565b6040516001600160a01b039091168152602001610282565b34801561064057600080fd5b5060075461061c906001600160a01b031681565b34801561066057600080fd5b5061036e600081565b34801561067557600080fd5b5061036e610684366004612b7f565b60096020526000908152604090205481565b3480156106a257600080fd5b506102546106b1366004612b7f565b6118ee565b3480156106c257600080fd5b5061061c6106d1366004612d34565b611acb565b3480156106e257600080fd5b506102546106f1366004612b7f565b611af5565b34801561070257600080fd5b5060035461027690610100900460ff1681565b34801561072157600080fd5b50610254610730366004612f50565b611c99565b34801561074157600080fd5b506003546102769062010000900460ff1681565b34801561076157600080fd5b50610254610770366004612d79565b611dc4565b6107806000336118c5565b61079d57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260408120548391036107e65760405163f4c8fba360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b0383166000818152600c6020908152604091829020805460ff191686151590811790915591519182527f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b91015b60405180910390a2505050565b60006001600160e01b03198216637965db0b60e01b148061087857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6004805461088b90612fbd565b80601f01602080910402602001604051908101604052809291908181526020018280546108b790612fbd565b80156109045780601f106108d957610100808354040283529160200191610904565b820191906000526020600020905b8154815290600101906020018083116108e757829003601f168201915b505050505081565b6109176000336118c5565b61093457604051634ca8886760e01b815260040160405180910390fd5b8151601981106109575760405163104e7cef60e31b815260040160405180910390fd5b815181146109785760405163586cb9e160e01b815260040160405180910390fd5b60005b818110156109c7576109bf84828151811061099857610998612ff1565b60200260200101518483815181106109b2576109b2612ff1565b60200260200101516115f2565b60010161097b565b50505050565b6109d86000336118c5565b6109f557604051634ca8886760e01b815260040160405180910390fd5b8015610a75576001600160a01b03821660009081526008602052604090205415610a325760405163094d784960e21b815260040160405180910390fd5b610a3d600083610c0c565b6040516001600160a01b038316907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a25050565b6007546001600160a01b0390811690831603610aa457604051634ca8886760e01b815260040160405180910390fd5b610aaf600083611dc4565b6040516001600160a01b038316907fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90600090a25b5050565b600061087881836118c5565b610aff6000336118c5565b610b1c57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260409020548110610b5457604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260408120805483908110610b7e57610b7e612ff1565b906000526020600020906005020190508060020160019054906101000a900460ff1615610bbe57604051635a4a8a4360e11b815260040160405180910390fd5b60028101805461ffff19166101001790556040516001600160a01b038416907f019d1297aa228eef7dd79b31640282cbe91fbc09dc0cbf5000ca5abf728059899061083a9085815260200190565b600082815260208190526040902060010154610c2781611de9565b610c318383611df3565b505050565b610c416000336118c5565b610c5e57604051634ca8886760e01b815260040160405180910390fd5b6003805482151563010000000263ff0000001990911617905560405130907f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b90610cad90841515815260200190565b60405180910390a250565b60035460ff16610d155734600003610ce3576040516327738acf60e21b815260040160405180910390fd5b60405134815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f90602001610cad565b80600003610d36576040516327738acf60e21b815260040160405180910390fd5b600654610d4e906001600160a01b0316333084611e77565b60065460405182815233916001600160a01b0316907fa17c2a1269d65f89b5c5688ce949fa4a7f59d8fcb9bbbac872d27a142b2b49e79060200160405180910390a35b50565b6001600160a01b0381163314610e045760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107dd565b610ae48282611ee2565b610e196000336118c5565b610e3657604051634ca8886760e01b815260040160405180910390fd5b600260015403610e585760405162461bcd60e51b81526004016107dd90613007565b60026001556001600160a01b0382166000908152600b60205260409020548110610e9557604051632bb8b38560e11b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260408120805483908110610ebf57610ebf612ff1565b906000526020600020906005020190508060020160019054906101000a900460ff1615610eff57604051635a4a8a4360e11b815260040160405180910390fd5b60028101805460ff191660011790556040516001600160a01b038416907f6f856c863eba32b6aca7d24f96817572a1f48382957c3dc9e8d4741f38afd72e90610f4b9085815260200190565b60405180910390a260035462010000900460ff1615610f7d5760405163af9e1b4360e01b815260040160405180910390fd5b600354610100900460ff1615610f9b57610f9683611f47565b610fa9565b610fa98382600001546120f6565b60028101805461ff00191661010017905580546040516001600160a01b038516917fba31eb1284fda4ab53229aad3cf178a52e96f04ef1a58f6da7bee5b02c6f61e991610ffc91869160048701906130bb565b60405180910390a2826001600160a01b03167fbf4bee5506452a156854c54e249d6b04b0cd83287ba208202be81a4f87a557398260000154836001018460040160405161104b939291906130e3565b60405180910390a250506001805550565b6110676000336118c5565b61108457604051634ca8886760e01b815260040160405180910390fd5b60038054821515620100000262ff0000199091161790556040517fb08f70f6219c5c2ed5e08e7cf45080e4840fde880b27a0841faf45475cd02d2e906110cf90831515815260200190565b60405180910390a150565b600b60205281600052604060002081815481106110f657600080fd5b90600052602060002090600502016000915091505080600001549080600101805461112090612fbd565b80601f016020809104026020016040519081016040528092919081815260200182805461114c90612fbd565b80156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b5050505060028301546003840154600485018054949560ff8085169661010090950416945091926111c990612fbd565b80601f01602080910402602001604051908101604052809291908181526020018280546111f590612fbd565b80156112425780601f1061121757610100808354040283529160200191611242565b820191906000526020600020905b81548152906001019060200180831161122557829003601f168201915b5050505050905086565b6005805461088b90612fbd565b60608160008167ffffffffffffffff81111561127757611277612b9c565b6040519080825280602002602001820160405280156112d557816020015b6112c2604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816112955790505b50905060005b8281101561137f5760008686838181106112f7576112f7612ff1565b905060200201602081019061130c9190612b7f565b6001600160a01b0381166000818152600860209081526040918290208251606081018452938452805491840191909152929350810161134a84611388565b81525084848151811061135f5761135f612ff1565b6020026020010181905250505080806113779061312e565b9150506112db565b50949350505050565b6001600160a01b038116600090815260086020526040812054829082036113cd5760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b6001600160a01b0383166000908152600860209081526040918290208251808401909352805483526001015490820152600354610100900460ff161561142c5760001981602001510361142257519150611477565b6000925050611477565b600081602001514261143e9190613147565b90506002548110156114725760025482516000919061145d908461315a565b6114679190613171565b945061147792505050565b505191505b50919050565b6114886000336118c5565b6114a557604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260408120548391036114e95760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b6509184e72a00082108015611501575060035460ff16155b1561152e5760405163c281dd3b60e01b8152600481018390526509184e72a00060248201526044016107dd565b620f424082108015611542575060035460ff165b1561156c5760405163c281dd3b60e01b815260048101839052620f424060248201526044016107dd565b6001600160a01b0383166000908152600860205260409020828155600354610100900460ff166115a9576002546115a39042613147565b60018201555b836001600160a01b03167f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d5846040516115e491815260200190565b60405180910390a250505050565b6115fd6000336118c5565b61161a57604051634ca8886760e01b815260040160405180910390fd5b600a5460191161163d5760405163104e7cef60e31b815260040160405180910390fd5b6116478282612308565b600354610100900460ff16156116975760408051808201825282815260001960208083019182526001600160a01b03861660009081526008909152929092209051815590516001909101556116e1565b6040518060400160405280828152602001600254426116b69190613147565b90526001600160a01b0383166000908152600860209081526040909120825181559101516001909101555b600a80546001808201835560008390527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890910180546001600160a01b0319166001600160a01b038616179055905461173a9190613147565b6001600160a01b0383166000908152600960205260409020556003546301000000900460ff16156117c0576001600160a01b0382166000818152600c6020908152604091829020805460ff1916600190811790915591519182527f70d2c92da609a3045e6b2a21e9d4cd5dc02f15a3830961912b03f5b236b78c8b910160405180910390a25b816001600160a01b03167f49707f6097e3d8b2d861adf67aadfb41a45746f9d46701065ed09ff12f9e41c3826040516117fb91815260200190565b60405180910390a25050565b6007546001600160a01b031633146118325760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166118595760405163b5aaecfd60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b03831690811790915561188390600090611ee2565b61188e600082611df3565b6040516001600160a01b038216907fb8121b611a666c4d7c03b96ba9dbc315332dc3f1aa77a22c0a1c162e55c5c32b90600090a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6118f96000336118c5565b61191657604051634ca8886760e01b815260040160405180910390fd5b6002600154036119385760405162461bcd60e51b81526004016107dd90613007565b600260015560006001600160a01b038216611a0457504780156119fe576007546040516000916001600160a01b03169083908381818185875af1925050503d80600081146119a2576040519150601f19603f3d011682016040523d82523d6000602084013e6119a7565b606091505b50509050806119c957604051637d6a86b760e11b815260040160405180910390fd5b6040518281527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a1505b50611ac4565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c9190613193565b90508015611ac257600754611a8e906001600160a01b03848116911683612412565b6040518181527f217f10a82904d12e2798042bffcd3f5c3cab8f7ea5638a4c0b804a5d6487c8fa9060200160405180910390a15b505b5060018055565b600a8181548110611adb57600080fd5b6000918252602090912001546001600160a01b0316905081565b611b006000336118c5565b611b1d57604051634ca8886760e01b815260040160405180910390fd5b6001600160a01b038116600090815260086020526040812054829103611b615760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b6001600160a01b038216600090815260096020526040812054600a8054919291611b8d90600190613147565b81548110611b9d57611b9d612ff1565b6000918252602090912001546001600160a01b03908116915084168114611c0c5780600a8381548110611bd257611bd2612ff1565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526009909152604090208290555b600a805480611c1d57611c1d6131ac565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0386168083526008825260408084208481556001018490556009835280842084905551928352917f95089b8d5f5b1df642061c1947fbec71ede04a0aaa13de4b3e1054031610a0d591016115e4565b336000818152600860205260408120549003611cd35760405163f4c8fba360e01b81526001600160a01b03821660048201526024016107dd565b600260015403611cf55760405162461bcd60e51b81526004016107dd90613007565b600260015560035462010000900460ff1615611d245760405163af9e1b4360e01b815260040160405180910390fd5b336000908152600c602052604090205460ff1615611d4c57611d47848484612442565b611dba565b600354610100900460ff1615611d6a57611d6533611f47565b611d74565b611d7433856120f6565b336001600160a01b03167fbf4bee5506452a156854c54e249d6b04b0cd83287ba208202be81a4f87a55739858585604051611db1939291906131c2565b60405180910390a25b5050600180555050565b600082815260208190526040902060010154611ddf81611de9565b610c318383611ee2565b610d91813361263c565b611dfd82826118c5565b610ae4576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e333390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040516001600160a01b03808516602483015283166044820152606481018290526109c79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526126a0565b611eec82826118c5565b15610ae4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0381166000908152600860205260409020600181015460001914611f8557604051632de4346760e11b815260040160405180910390fd5b805460035460ff16612038574781811015611fbd57604051631508de4560e01b815260048101839052602481018290526044016107dd565b6000846001600160a01b03168360405160006040518083038185875af1925050503d806000811461200a576040519150601f19603f3d011682016040523d82523d6000602084013e61200f565b606091505b505090508061203157604051637d6a86b760e11b815260040160405180910390fd5b50506120eb565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a59190613193565b9050818110156120d257604051631508de4560e01b815260048101839052602481018290526044016107dd565b6006546120e9906001600160a01b03168584612412565b505b504260019091015550565b600061210183611388565b90508181101561212e5760405163ba49c84f60e01b815260048101839052602481018290526044016107dd565b6001600160a01b038316600090815260086020526040812060018101546002549192909161215c9042613147565b90508082101561216a578091505b60035460ff1661221b5747858110156121a057604051631508de4560e01b815260048101879052602481018290526044016107dd565b6000876001600160a01b03168760405160006040518083038185875af1925050503d80600081146121ed576040519150601f19603f3d011682016040523d82523d6000602084013e6121f2565b606091505b505090508061221457604051637d6a86b760e11b815260040160405180910390fd5b50506122ce565b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122889190613193565b9050858110156122b557604051631508de4560e01b815260048101879052602481018290526044016107dd565b6006546122cc906001600160a01b03168888612412565b505b83856122da8442613147565b6122e4919061315a565b6122ee9190613171565b6122f890836131ed565b8360010181905550505050505050565b6509184e72a00081108015612320575060035460ff16155b1561234d5760405163c281dd3b60e01b8152600481018290526509184e72a00060248201526044016107dd565b620f424081108015612361575060035460ff165b1561238b5760405163c281dd3b60e01b815260048101829052620f424060248201526044016107dd565b6001600160a01b0382166123b25760405163094d784960e21b815260040160405180910390fd5b6123bd6000836118c5565b156123db5760405163094d784960e21b815260040160405180910390fd5b6001600160a01b03821660009081526008602052604090205415610ae457604051637fe8efbb60e01b815260040160405180910390fd5b6040516001600160a01b038316602482015260448101829052610c3190849063a9059cbb60e01b90606401611eab565b336000818152600b6020526040812054815b818110156124ba576001600160a01b0384166000908152600b6020526040902080548290811061248657612486612ff1565b906000526020600020906005020160020160019054906101000a900460ff166124b257600192506124ba565b600101612454565b5081156124da5760405163ef97f13b60e01b815260040160405180910390fd5b60006124e533611388565b9050868110156125125760405163ba49c84f60e01b815260048101889052602481018290526044016107dd565b336000908152600b60209081526040808320815160c0810183528b81528084018b81529281018590526060810185905242608082015260a081018a905281546001818101845592865293909420845160059094020192835590519082019061257a908261324e565b506040820151600282018054606085015115156101000261ff00199315159390931661ffff19909116179190911790556080820151600382015560a082015160048201906125c8908261324e565b5050336000908152600b60205260408120549091506125e990600190613147565b9050336001600160a01b03167f967424654a31575708743338dfa2677684aab1fa5e437849a9bfa81176fea693828a8a8a60405161262a949392919061330e565b60405180910390a25050505050505050565b61264682826118c5565b610ae45761265e816001600160a01b03166014612772565b612669836020612772565b60405160200161267a92919061333f565b60408051601f198184030181529082905262461bcd60e51b82526107dd91600401612b6c565b60006126f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129159092919063ffffffff16565b805190915015610c31578080602001905181019061271391906133b4565b610c315760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107dd565b6060600061278183600261315a565b61278c9060026131ed565b67ffffffffffffffff8111156127a4576127a4612b9c565b6040519080825280601f01601f1916602001820160405280156127ce576020820181803683370190505b509050600360fc1b816000815181106127e9576127e9612ff1565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061281857612818612ff1565b60200101906001600160f81b031916908160001a905350600061283c84600261315a565b6128479060016131ed565b90505b60018111156128bf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061287b5761287b612ff1565b1a60f81b82828151811061289157612891612ff1565b60200101906001600160f81b031916908160001a90535060049490941c936128b8816133d1565b905061284a565b50831561290e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107dd565b9392505050565b6060612924848460008561292c565b949350505050565b60608247101561298d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107dd565b6001600160a01b0385163b6129e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107dd565b600080866001600160a01b03168587604051612a0091906133e8565b60006040518083038185875af1925050503d8060008114612a3d576040519150601f19603f3d011682016040523d82523d6000602084013e612a42565b606091505b5091509150612a52828286612a5d565b979650505050505050565b60608315612a6c57508161290e565b825115612a7c5782518084602001fd5b8160405162461bcd60e51b81526004016107dd9190612b6c565b6001600160a01b0381168114610d9157600080fd5b8015158114610d9157600080fd5b60008060408385031215612acc57600080fd5b8235612ad781612a96565b91506020830135612ae781612aab565b809150509250929050565b600060208284031215612b0457600080fd5b81356001600160e01b03198116811461290e57600080fd5b60005b83811015612b37578181015183820152602001612b1f565b50506000910152565b60008151808452612b58816020860160208601612b1c565b601f01601f19169290920160200192915050565b60208152600061290e6020830184612b40565b600060208284031215612b9157600080fd5b813561290e81612a96565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612bdb57612bdb612b9c565b604052919050565b600067ffffffffffffffff821115612bfd57612bfd612b9c565b5060051b60200190565b600082601f830112612c1857600080fd5b81356020612c2d612c2883612be3565b612bb2565b82815260059290921b84018101918181019086841115612c4c57600080fd5b8286015b84811015612c675780358352918301918301612c50565b509695505050505050565b60008060408385031215612c8557600080fd5b823567ffffffffffffffff80821115612c9d57600080fd5b818501915085601f830112612cb157600080fd5b81356020612cc1612c2883612be3565b82815260059290921b84018101918181019089841115612ce057600080fd5b948201945b83861015612d07578535612cf881612a96565b82529482019490820190612ce5565b96505086013592505080821115612d1d57600080fd5b50612d2a85828601612c07565b9150509250929050565b600060208284031215612d4657600080fd5b5035919050565b60008060408385031215612d6057600080fd5b8235612d6b81612a96565b946020939093013593505050565b60008060408385031215612d8c57600080fd5b823591506020830135612ae781612a96565b600060208284031215612db057600080fd5b813561290e81612aab565b86815260c060208201526000612dd460c0830188612b40565b8615156040840152851515606084015284608084015282810360a0840152612dfc8185612b40565b9998505050505050505050565b60008060208385031215612e1c57600080fd5b823567ffffffffffffffff80821115612e3457600080fd5b818501915085601f830112612e4857600080fd5b813581811115612e5757600080fd5b8660208260051b8501011115612e6c57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015612ed357815180516001600160a01b0316855286810151878601528501518585015260609093019290850190600101612e9b565b5091979650505050505050565b600082601f830112612ef157600080fd5b813567ffffffffffffffff811115612f0b57612f0b612b9c565b612f1e601f8201601f1916602001612bb2565b818152846020838601011115612f3357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215612f6557600080fd5b83359250602084013567ffffffffffffffff80821115612f8457600080fd5b612f9087838801612ee0565b93506040860135915080821115612fa657600080fd5b50612fb386828701612ee0565b9150509250925092565b600181811c90821680612fd157607f821691505b60208210810361147757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000815461304b81612fbd565b8085526020600183811680156130685760018114613082576130b0565b60ff1985168884015283151560051b8801830195506130b0565b866000528260002060005b858110156130a85781548a820186015290830190840161308d565b890184019650505b505050505092915050565b8381528260208201526060604082015260006130da606083018461303e565b95945050505050565b8381526060602082015260006130fc606083018561303e565b828103604084015261310e818561303e565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161314057613140613118565b5060010190565b8181038181111561087857610878613118565b808202811582820484141761087857610878613118565b60008261318e57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156131a557600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fd5b8381526060602082015260006131db6060830185612b40565b828103604084015261310e8185612b40565b8082018082111561087857610878613118565b601f821115610c3157600081815260208120601f850160051c810160208610156132275750805b601f850160051c820191505b8181101561324657828155600101613233565b505050505050565b815167ffffffffffffffff81111561326857613268612b9c565b61327c816132768454612fbd565b84613200565b602080601f8311600181146132b157600084156132995750858301515b600019600386901b1c1916600185901b178555613246565b600085815260208120601f198616915b828110156132e0578886015182559484019460019091019084016132c1565b50858210156132fe5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b84815283602082015260806040820152600061332d6080830185612b40565b8281036060840152612a528185612b40565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613377816017850160208801612b1c565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133a8816028840160208801612b1c565b01602801949350505050565b6000602082840312156133c657600080fd5b815161290e81612aab565b6000816133e0576133e0613118565b506000190190565b600082516133fa818460208701612b1c565b919091019291505056fea26469706673582212206bf2236162ab29b7745e8a27e33e36ae85c62fb42feb5d51146a20275435d4d664736f6c63430008140033",
  "devdoc": {
    "details": "Main contract for streaming ETH or ERC20 tokens to builders Inherits all functionality from modular contracts",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addBatch(address[],uint256[])": {
        "details": "Add a batch of builders",
        "params": {
          "_builders": "Array of builder addresses",
          "_caps": "Array of cap values"
        }
      },
      "addBuilderStream(address,uint256)": {
        "details": "Add a new builder's stream",
        "params": {
          "_builder": "Builder address",
          "_cap": "Maximum amount of funds that can be withdrawn in a cycle"
        }
      },
      "allBuildersData(address[])": {
        "details": "Get all builders' data",
        "params": {
          "_builders": "Array of builder addresses"
        },
        "returns": {
          "_0": "Array of BuilderData for each builder"
        }
      },
      "approveWithdraw(address,uint256)": {
        "details": "Approve and complete a withdrawal request in one step",
        "params": {
          "_builder": "Builder address",
          "_requestId": "ID of the request to approve and complete"
        }
      },
      "constructor": {
        "details": "Constructor that passes parameters to the base contract",
        "params": {
          "_builders": "Array of builder addresses",
          "_caps": "Array of cap values for builders",
          "_cycle": "Cycle duration",
          "_description": "Description of the cohort",
          "_name": "Name of the cohort",
          "_primaryAdmin": "Address of the primary admin",
          "_requiresApproval": "Whether withdrawals require approval",
          "_tokenAddress": "Address of ERC20 token (zero address for ETH)"
        }
      },
      "drainContract(address)": {
        "details": "Drain the contract to the primary admin address",
        "params": {
          "_token": "Token address (zero address for ETH)"
        }
      },
      "fundContract(uint256)": {
        "details": "Fund the contract with ETH or ERC20 tokens",
        "params": {
          "_amount": "Amount to fund (for ERC20 tokens)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "Function to check if an address is an admin"
      },
      "modifyAdminRole(address,bool)": {
        "details": "Modify admin roles",
        "params": {
          "adminAddress": "Address to grant/revoke admin role",
          "shouldGrant": "Whether to grant or revoke the role"
        }
      },
      "rejectWithdraw(address,uint256)": {
        "details": "Reject a withdrawal request",
        "params": {
          "_builder": "Builder address",
          "_requestId": "ID of the request to reject"
        }
      },
      "removeBuilderStream(address)": {
        "details": "Remove a builder's stream",
        "params": {
          "_builder": "Builder address"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setBuilderApprovalRequirement(address,bool)": {
        "details": "Set whether a builder requires approval for withdrawals",
        "params": {
          "_builder": "Builder address",
          "_requiresApproval": "Whether the builder requires approval"
        }
      },
      "streamWithdraw(uint256,string,string)": {
        "details": "Stream withdraw for a builder",
        "params": {
          "_amount": "Amount to withdraw",
          "_reason": "Reason for withdrawal"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "toggleContractApprovalRequirement(bool)": {
        "details": "Set whether this contract requires approval for withdrawals",
        "params": {
          "_enable": "Whether to require approval"
        }
      },
      "toggleLock(bool)": {
        "details": "Lock or unlock the contract",
        "params": {
          "_enable": "Whether to lock the contract"
        }
      },
      "transferPrimaryAdmin(address)": {
        "details": "Transfer primary admin role",
        "params": {
          "newPrimaryAdmin": "Address of the new primary admin"
        }
      },
      "unlockedBuilderAmount(address)": {
        "details": "Get the unlocked amount for a builder",
        "params": {
          "_builder": "Builder address"
        },
        "returns": {
          "_0": "Unlocked amount for the builder"
        }
      },
      "updateBuilderStreamCap(address,uint256)": {
        "details": "Update a builder's stream cap",
        "params": {
          "_builder": "Builder address",
          "_newCap": "New cap value"
        }
      }
    },
    "title": "Cohort",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 403,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1992,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "cycle",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1994,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "isERC20",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1996,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "isONETIME",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1998,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "locked",
        "offset": 2,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2000,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "requireApprovalForWithdrawals",
        "offset": 3,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2002,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2004,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "description",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2006,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2008,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "primaryAdmin",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2013,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "streamingBuilders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(BuilderStreamInfo)3146_storage)"
      },
      {
        "astId": 2017,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "builderIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2020,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "activeBuilders",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2026,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "withdrawRequests",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_struct(WithdrawRequest)3159_storage)dyn_storage)"
      },
      {
        "astId": 2030,
        "contract": "contracts/Cohort.sol:Cohort",
        "label": "requiresApproval",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WithdrawRequest)3159_storage)dyn_storage": {
        "base": "t_struct(WithdrawRequest)3159_storage",
        "encoding": "dynamic_array",
        "label": "struct ICohortStructs.WithdrawRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(WithdrawRequest)3159_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICohortStructs.WithdrawRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(WithdrawRequest)3159_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(BuilderStreamInfo)3146_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICohortStructs.BuilderStreamInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BuilderStreamInfo)3146_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BuilderStreamInfo)3146_storage": {
        "encoding": "inplace",
        "label": "struct ICohortStructs.BuilderStreamInfo",
        "members": [
          {
            "astId": 3143,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "cap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3145,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "last",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WithdrawRequest)3159_storage": {
        "encoding": "inplace",
        "label": "struct ICohortStructs.WithdrawRequest",
        "members": [
          {
            "astId": 3148,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3150,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "reason",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3152,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "approved",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3154,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "completed",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3156,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "requestTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3158,
            "contract": "contracts/Cohort.sol:Cohort",
            "label": "projectName",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}